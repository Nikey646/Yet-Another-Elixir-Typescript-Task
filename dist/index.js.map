{"version":3,"sources":["TypescriptTask.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["export default class TypescriptTask extends Elixir.Task {\r\n\r\n\tprivate gulpIf\r\n\tprivate ts\r\n\tprivate fs\r\n\tprivate _\r\n\r\n\tconstructor(name : string, paths : string[], private options : Object) {\r\n\t\tsuper(name, null, paths)\r\n\t}\r\n\r\n\tloadDependencies() {\r\n\t\tthis.gulpIf = require(\"gulp-if\")\r\n\t\tthis.ts = require(\"gulp-typescript\")\r\n\t\tthis.fs = require(\"fs\")\r\n\t\tthis._ = require(\"lodash\")\r\n\t}\r\n\r\n\tregisterWatchers() {\r\n\t\tthis.watch(this.src.baseDir + Elixir.config.ts.search)\r\n\t\t\t.ignore(this.output.path)\r\n\t}\r\n\r\n\tgulpTask() {\r\n\t\treturn gulp.src(this.src.path)\r\n\t\t\t.pipe(this.initSourceMaps())\r\n\t\t\t.pipe(this.compile()) // Ignore errors, since Typescript still compiles by default\r\n\t\t\t.pipe(this.gulpIf(Elixir.config.ts.concatFiles, this.concat()))\r\n\t\t\t.pipe(this.minify())\r\n\t\t\t.on('error', this.onError())\r\n\t\t\t.pipe(this.writeSourceMaps())\r\n\t\t\t.pipe(this.saveAs(gulp))\r\n\t\t\t.pipe(this.onSuccess())\r\n\t}\r\n\r\n\tcompile() {\r\n\t\tthis.recordStep(\"Transforming Typescript\")\r\n\t\treturn this.ts(this.mergeOptions());\r\n\t}\r\n\r\n\tmergeOptions() {\r\n\t\tlet defaults = {\r\n\t\t\t\ttarget: \"ES5\",\r\n\t\t\t\tmodule: \"commonjs\",\r\n\t\t\t\tsortOutput: Elixir.config.ts.concatFiles,\r\n\t\t\t},\r\n\t\t\tproject = {}\r\n\r\n\t\tif (this.fs.existsSync(\"tsconfig.json\"))\r\n\t\t\tproject = this.ts.createProject(\"tsconfig.json\");\r\n\r\n\t\treturn this._.extend(defaults, project.config.compilerOptions, this.options);\r\n\t}\r\n\r\n}\r\n","Elixir.config.ts = {\r\n\tfolder: \"ts\",\r\n\toutputFolder: \"js\",\r\n\tconcatFiles: true,\r\n\tsearch: \"/**/*.ts\"\r\n}\r\n\r\nElixir.extend(\"typescript\", function(scripts, output, baseDir, options) {\r\n\tnew TypescriptTask(\"typescript\", getPaths(scripts, baseDir, output), options)\r\n})\r\n\r\nexport function getPaths(src, baseDir, output) {\r\n\treturn new Elixir.GulpPaths()\r\n\t\t.src(src, baseDir || Elixir.config.get(\"assets.ts.folder\"))\r\n\t\t.output(output || Elixir.config.get(\"public.ts.outputFolder\"), \"all.js\")\r\n}\r\n"],"sourceRoot":"/source/"}